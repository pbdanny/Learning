colnames(x)  <- c("fold", "C", "Q", "noSupportVec", "Ein", "Eout")
out <- rbind(out, x)
}
}
View(out)
out <- list()
for (i in 1:f) {  # Looping each fold
for (c in c(0.0001, 0.001, 0.01, 0.1, 1)) {  # Looping each C
x <- as.data.frame.list(fnSVM(d.tr[cv.idx != i,], d.tr[cv.idx == i,], c, 2))
x$fold <- i
x <- x[, c(6,1:5)]
colnames(x)  <- c("fold", "C", "Q", "noSupportVec", "Ein", "Ecv")
out <- rbind(out, x)
}  # End loop C
} # End loop fold
View(out)
View(out)
View(out)
aggregate(out, Ecv ~ C, FUN = mean)
aggregate(out, out["Ecv"] ~ out["C"], FUN = mean)
aggregate(out, by = out["C"], FUN = mean)
aggregate(out["Ecv"], by = out["C"], FUN = mean)
a <- aggregate(out["Ecv"], by = out["C"], FUN = mean)
View(a)
min(out["Ecv"])
max(out["Ecv"])
min(out["Ecv"])
b <- a[order(c(Ecv, C), increaseing = TRUE), ]
b <- a[order(c(out$Ecv, out$C), increaseing = TRUE), ]
b <- a[order(out$Ecv, out$C, increaseing = TRUE), ]
b <- a[order(out$Ecv, out$C), ]
View(b)
b <- a[order(a$Ecv, a$C), ]
fnSVMCV <- function(train, test, digit1, digit2 = NA, C = 0.01, Q = 2, f = 10) {
d.tr <- fnDigitTestType(d.train, digit1, digit2)
rownames(d.tr) <- NULL  # Reset rownums of data
cv.idx <- sample(rep(1:f, nrow(d.tr)/f))  # create cv.idx for cv test
out <- list()
for (i in 1:f) {  # Looping each fold
for (c in c(0.0001, 0.001, 0.01, 0.1, 1)) {  # Looping each C
x <- as.data.frame.list(fnSVM(d.tr[cv.idx != i,], d.tr[cv.idx == i,], c, 2))
x$fold <- i
x <- x[, c(6,1:5)]
colnames(x)  <- c("fold", "C", "Q", "noSupportVec", "Ein", "Ecv")
out <- rbind(out, x)
}  # End loop C
} # End loop fold
agg <- aggregate(out["Ecv"], by = out["C"], FUN = mean)   # Average Ecv by C
agg <- agg[order(agg$Ecv, agg$C), ]  # order by least Ecv and least C
return(agg[1])
}
a <- fnSVMCV(d.train, d.test, 1, 5)
View(a)
a <- fnSVMCV(d.train, d.test, 1, 5)
fnSVMCV <- function(train, test, digit1, digit2 = NA, C = 0.01, Q = 2, f = 10) {
d.tr <- fnDigitTestType(d.train, digit1, digit2)
rownames(d.tr) <- NULL  # Reset rownums of data
cv.idx <- sample(rep(1:f, nrow(d.tr)/f))  # create cv.idx for cv test
out <- list()
for (i in 1:f) {  # Looping each fold
for (c in c(0.0001, 0.001, 0.01, 0.1, 1)) {  # Looping each C
x <- as.data.frame.list(fnSVM(d.tr[cv.idx != i,], d.tr[cv.idx == i,], c, 2))
x$fold <- i
x <- x[, c(6,1:5)]
colnames(x)  <- c("fold", "C", "Q", "noSupportVec", "Ein", "Ecv")
out <- rbind(out, x)
}  # End loop C
} # End loop fold
agg <- aggregate(out["Ecv"], by = out["C"], FUN = mean)   # Average Ecv by C
agg <- agg[order(agg$Ecv, agg$C), ]  # order by least Ecv and least C
return(agg[1, ])
}
a <- fnSVMCV(d.train, d.test, 1, 5)
View(a)
a <- fnSVMCV(d.train, d.test, 1, 5)
View(a)
a <- fnSVMCV(d.train, d.test, 1, 5)
View(a)
load(file = "DataHW8.RData")
library("e1071")
# Create target Y = {-1,1} by digit test type (one vs one) or (one vs all)
fnDigitTestType <- function(data, d1, d2 = NA) {
data$Y <- as.factor(ifelse(data[,"digit"] == d1, 1, -1))
if (is.na(d2)) {  # not specify 2nd compare digit, return other digit as -1
return(data)
} else {  # if specify d2 then one vs one , return only subset of d2
return(data[data$digit == d1 | data$digit == d2, ])
}
}
fnSVM <- function(train, test, C = 0.01, Q = 2) {
re.list <- list()
model <- svm(x = train[ ,c("inten","sym")],
y = train[ ,"Y"],
type = "C-classification", scale = FALSE,
kernal = "polynomial", degree = Q, cost = C)
pred <- predict(model, newdata = train[ ,c("inten","sym")])
Ein <- sum(train$Y != pred)/nrow(train)
pred <- predict(model, newdata = test[ ,c("inten","sym")])
Eout <- sum(test$Y != pred)/nrow(test)
re.list <- cbind(re.list, c(C, Q, model$tot.nSV, Ein, Eout))
return(re.list)
}
fnSVMDigit <- function(train, test, digit1, digit2 = NA, C = 0.01, Q = 2) {
d.tr <- fnDigitTestType(train, digit1, digit2)
d.te <- fnDigitTestType(test, digit1, digit2)
x <- as.data.frame.list(fnSVM(d.tr, d.te, C, Q))
x$digit <- digit1
x <- x[, c(6,1:5)]
colnames(x)  <- c("digit", "C", "Q", "noSupportVec", "Ein", "Eout")
return(x)
}
fnSVMCV <- function(train, test, digit1, digit2 = NA, C = 0.01, Q = 2, f = 10) {
d.tr <- fnDigitTestType(d.train, digit1, digit2)
rownames(d.tr) <- NULL  # Reset rownums of data
cv.idx <- sample(rep(1:f, nrow(d.tr)/f))  # create cv.idx for cv test
out <- list()
for (i in 1:f) {  # Looping each fold
for (c in c(0.0001, 0.001, 0.01, 0.1, 1)) {  # Looping each C
x <- as.data.frame.list(fnSVM(d.tr[cv.idx != i,], d.tr[cv.idx == i,], c, 2))
x$fold <- i
x <- x[, c(6,1:5)]
colnames(x)  <- c("fold", "C", "Q", "noSupportVec", "Ein", "Ecv")
out <- rbind(out, x)
}  # End loop C
} # End loop fold
agg <- aggregate(out["Ecv"], by = out["C"], FUN = mean)   # Average Ecv by C
agg <- agg[order(agg$Ecv, agg$C), ]  # order by least Ecv and least C
return(agg[1, ])
}
a <- fnSVMCV(d.train, d.test, 1, 5)
View(a)
fnSVMCV <- function(train, test, digit1, digit2 = NA, C = 0.01, Q = 2, f = 10) {
d.tr <- fnDigitTestType(train, digit1, digit2)
rownames(d.tr) <- NULL  # Reset rownums of data
cv.idx <- sample(rep(1:f, nrow(d.tr)/f))  # create cv.idx for cv test
out <- list()
for (i in 1:f) {  # Looping each fold
for (c in c(0.0001, 0.001, 0.01, 0.1, 1)) {  # Looping each C
x <- as.data.frame.list(fnSVM(d.tr[cv.idx != i,], d.tr[cv.idx == i,], c, 2))
x$fold <- i
x <- x[, c(6,1:5)]
colnames(x)  <- c("fold", "C", "Q", "noSupportVec", "Ein", "Ecv")
out <- rbind(out, x)
}  # End loop C
} # End loop fold
agg <- aggregate(out["Ecv"], by = out["C"], FUN = mean)   # Average Ecv by C
agg <- agg[order(agg$Ecv, agg$C), ]  # order by least Ecv and least C
return(agg[1, ])
}
a <- fnSVMCV(d.train, d.test, 1, 5)
View(a)
d.tr <- fnDigitTestType(d.train, 1, 5)
View(d.tr)
rownames(d.tr) <- NULL  # Reset rownums of data
f <- 10
cv.idx <- sample(rep(1:f, nrow(d.tr)/f))  # create cv.idx for cv test
View(as.data.frame(cv.idx))
out <- list()
nrow(d.tr[cv.idx == i,])
nrow(d.tr[cv.idx == 1,])
nrow(d.tr[cv.idx == 2,])
View(d.tr)
for (i in 1:f) {  # Looping each fold
for (c in c(0.0001, 0.001, 0.01, 0.1, 1)) {  # Looping each C
x <- as.data.frame.list(fnSVM(d.tr[cv.idx != i,], d.tr[cv.idx == i,], c, 2))
x$fold <- i
x <- x[, c(6,1:5)]
colnames(x)  <- c("fold", "C", "Q", "noSupportVec", "Ein", "Ecv")
out <- rbind(out, x)
}  # End loop C
} # End loop fold
agg <- aggregate(out["Ecv"], by = out["C"], FUN = mean)   # Average Ecv by C
agg <- agg[order(agg$Ecv, agg$C), ]  # order by least Ecv and least C
View(agg)
View(out)
load(file = "DataHW8.RData")
library("e1071")
# Create target Y = {-1,1} by digit test type (one vs one) or (one vs all)
fnDigitTestType <- function(data, d1, d2 = NA) {
data$Y <- as.factor(ifelse(data[,"digit"] == d1, 1, -1))
if (is.na(d2)) {  # not specify 2nd compare digit, return other digit as -1
return(data)
} else {  # if specify d2 then one vs one , return only subset of d2
return(data[data$digit == d1 | data$digit == d2, ])
}
}
fnSVM <- function(train, test, C = 0.01, Q = 2) {
re.list <- list()
model <- svm(x = train[ ,c("inten","sym")],
y = train[ ,"Y"],
type = "C-classification", scale = FALSE,
kernal = "polynomial", degree = Q, cost = C)
pred <- predict(model, newdata = train[ ,c("inten","sym")])
Ein <- sum(train$Y != pred)/nrow(train)
pred <- predict(model, newdata = test[ ,c("inten","sym")])
Eout <- sum(test$Y != pred)/nrow(test)
re.list <- cbind(re.list, c(C, Q, model$tot.nSV, Ein, Eout))
return(re.list)
}
fnSVMDigit <- function(train, test, digit1, digit2 = NA, C = 0.01, Q = 2) {
d.tr <- fnDigitTestType(train, digit1, digit2)
d.te <- fnDigitTestType(test, digit1, digit2)
x <- as.data.frame.list(fnSVM(d.tr, d.te, C, Q))
x$digit <- digit1
x <- x[, c(6,1:5)]
colnames(x)  <- c("digit", "C", "Q", "noSupportVec", "Ein", "Eout")
return(x)
}
# fn run SVM with CV
fnSVMCV <- function(train, test, digit1, digit2 = NA, C = 0.01, Q = 2, f = 10) {
d.tr <- fnDigitTestType(train, digit1, digit2)
rownames(d.tr) <- NULL  # Reset rownums of data
cv.idx <- sample(rep(1:f, nrow(d.tr)/f))  # create cv.idx for cv test
out <- list()
for (i in 1:f) {  # Looping each fold
for (c in c(0.0001, 0.001, 0.01, 0.1, 1)) {  # Looping each C
x <- as.data.frame.list(fnSVM(d.tr[cv.idx != i,], d.tr[cv.idx == i,], c, 2))
x$fold <- i
x <- x[, c(6,1:5)]
colnames(x)  <- c("fold", "C", "Q", "noSupportVec", "Ein", "Ecv")
out <- rbind(out, x)
}  # End loop C
} # End loop fold
agg <- aggregate(out["Ecv"], by = out["C"], FUN = mean)   # Average Ecv by C
agg <- agg[order(agg$Ecv, agg$C), ]  # order by least Ecv and least C
return(agg[1, ])
}
ans5 <- list()
for (j in 1:100){
x <- funSVMCV(d.train, d.test, 1, 5)
ans5 <- rbind(ans5, x)
ans5 <- as.data.frame.list(ans5)
}
ans5 <- list()
for (j in 1:100){
x <- fnSVMCV(d.train, d.test, 1, 5)
ans5 <- rbind(ans5, x)
ans5 <- as.data.frame.list(ans5)
}
ans5 <- list()
for (j in 1:100){
x <- fnSVMCV(d.train, d.test, 1, 5)
ans5 <- rbind(ans5, x)
}
View(ans5)
load(file = "DataHW8.RData")
library("e1071")
load(file = "DataHW8.RData")
library("e1071")
# Create target Y = {-1,1} by digit test type (one vs one) or (one vs all)
fnDigitTestType <- function(data, d1, d2 = NA) {
data$Y <- as.factor(ifelse(data[,"digit"] == d1, 1, -1))
if (is.na(d2)) {  # not specify 2nd compare digit, return other digit as -1
return(data)
} else {  # if specify d2 then one vs one , return only subset of d2
return(data[data$digit == d1 | data$digit == d2, ])
}
}
fnSVM <- function(train, test, C = 0.01, Q = 2) {
re.list <- list()
model <- svm(x = train[ ,c("inten","sym")],
y = train[ ,"Y"],
type = "C-classification", scale = FALSE,
kernel = "polynomial", degree = Q, cost = C)
pred <- predict(model, newdata = train[ ,c("inten","sym")])
Ein <- sum(train$Y != pred)/nrow(train)
pred <- predict(model, newdata = test[ ,c("inten","sym")])
Eout <- sum(test$Y != pred)/nrow(test)
re.list <- cbind(re.list, c(C, Q, model$tot.nSV, Ein, Eout))
return(re.list)
}
fnSVMDigit <- function(train, test, digit1, digit2 = NA, C = 0.01, Q = 2) {
d.tr <- fnDigitTestType(train, digit1, digit2)
d.te <- fnDigitTestType(test, digit1, digit2)
x <- as.data.frame.list(fnSVM(d.tr, d.te, C, Q))
x$digit <- digit1
x <- x[, c(6,1:5)]
colnames(x)  <- c("digit", "C", "Q", "noSupportVec", "Ein", "Eout")
return(x)
}
# Answer Q2
ans1 <- list()
for (i in seq(0, 8, by = 2)) {
x <- fnSVMDigit(d.train, d.test, i)
ans1 <- rbind(ans1, x)
}
# Answer Q3
ans2 <- list()
for (i in seq(1, 9, by = 2)) {
x <- fnSVMDigit(d.train, d.test, i)
ans2 <- rbind(ans2, x)
}
# Answer Q4
# = 2393 - 800 ~ 1600
# Ans Q5
ans3 <- list()
for (C in c(0.001, 0.01, 0.1, 1)) {
x <- fnSVMDigit(d.train, d.test, 5, 1, C, 2)
ans3 <- rbind(ans3, x)
}
# Ans Q6
ans4 <- list()
for (q in c(2, 5)) {
for (c in c(0.0001, 0.001, 0.01, 1)) {
x <- fnSVMDigit(d.train, d.test, 5, 1, c, q)
ans4 <- rbind(ans4, x)
}
}
View(ans4)
# fn run SVM with CV
fnSVMCV <- function(train, test, digit1, digit2 = NA, C = 0.01, Q = 2, f = 10) {
d.tr <- fnDigitTestType(train, digit1, digit2)
rownames(d.tr) <- NULL  # Reset rownums of data
cv.idx <- sample(rep(1:f, nrow(d.tr)/f))  # create cv.idx for cv test
out <- list()
for (i in 1:f) {  # Looping each fold
for (c in c(0.0001, 0.001, 0.01, 0.1, 1)) {  # Looping each C
x <- as.data.frame.list(fnSVM(d.tr[cv.idx != i,], d.tr[cv.idx == i,], c, 2))
x$fold <- i
x <- x[, c(6,1:5)]
colnames(x)  <- c("fold", "C", "Q", "noSupportVec", "Ein", "Ecv")
out <- rbind(out, x)
}  # End loop C
} # End loop fold
agg <- aggregate(out["Ecv"], by = out["C"], FUN = mean)   # Average Ecv by C
agg <- agg[order(agg$Ecv, agg$C), ]  # order by least Ecv and least C
return(agg[1, ])
}
ans5 <- list()
for (j in 1:10){
x <- fnSVMCV(d.train, d.test, 1, 5)
ans5 <- rbind(ans5, x)
}
View(ans5)
mean(ans5$Ecv)
load(file = "DataHW8.RData")
library("e1071")
# Create target Y = {-1,1} by digit test type (one vs one) or (one vs all)
fnDigitTestType <- function(data, d1, d2 = NA) {
data$Y <- as.factor(ifelse(data[,"digit"] == d1, 1, -1))
if (is.na(d2)) {  # not specify 2nd compare digit, return other digit as -1
return(data)
} else {  # if specify d2 then one vs one , return only subset of d2
return(data[data$digit == d1 | data$digit == d2, ])
}
}
fnSVM <- function(train, test, C = 0.01, Q = 2) {
re.list <- list()
model <- svm(x = train[ ,c("inten","sym")],
y = train[ ,"Y"],
type = "C-classification", scale = FALSE,
kernel = "polynomial", degree = Q, cost = C)
pred <- predict(model, newdata = train[ ,c("inten","sym")])
Ein <- sum(train$Y != pred)/nrow(train)
pred <- predict(model, newdata = test[ ,c("inten","sym")])
Eout <- sum(test$Y != pred)/nrow(test)
re.list <- cbind(re.list, c(C, Q, model$tot.nSV, Ein, Eout))
return(re.list)
}
fnSVMDigit <- function(train, test, digit1, digit2 = NA, C = 0.01, Q = 2) {
d.tr <- fnDigitTestType(train, digit1, digit2)
d.te <- fnDigitTestType(test, digit1, digit2)
x <- as.data.frame.list(fnSVM(d.tr, d.te, C, Q))
x$digit <- digit1
x <- x[, c(6,1:5)]
colnames(x)  <- c("digit", "C", "Q", "noSupportVec", "Ein", "Eout")
return(x)
}
fnSVMRBF <- function(train, test, C = 0.01, Q = 2) {
re.list <- list()
model <- svm(x = train[ ,c("inten","sym")],
y = train[ ,"Y"],
type = "C-classification", scale = FALSE,
kernel = "radial basis", degree = Q, cost = C)
pred <- predict(model, newdata = train[ ,c("inten","sym")])
Ein <- sum(train$Y != pred)/nrow(train)
pred <- predict(model, newdata = test[ ,c("inten","sym")])
Eout <- sum(test$Y != pred)/nrow(test)
re.list <- cbind(re.list, c(C, Q, model$tot.nSV, Ein, Eout))
return(re.list)
}
fnSVMRBFDigit <- function(train, test, digit1, digit2 = NA, C = 0.01, Q = 2) {
d.tr <- fnDigitTestType(train, digit1, digit2)
d.te <- fnDigitTestType(test, digit1, digit2)
x <- as.data.frame.list(fnSVMRBF(d.tr, d.te, C, Q))
x$digit <- digit1
x <- x[, c(6,1:5)]
colnames(x)  <- c("digit", "C", "Q", "noSupportVec", "Ein", "Eout")
return(x)
}
ans6 <- list()
for (C in c(0.001, 0.01, 0.1, 1)) {
x <- fnSVMRBFDigit(d.train, d.test, 1, 5, C, 2)
ans6 <- rbind(ans6, x)
}
ans6 <- list()
for (C in c(0.001, 0.01, 0.1, 1)) {
x <- fnSVMRBFDigit(d.train, d.test, 1, 5, C, 2)
ans6 <- rbind(ans6, x)
}
fnSVMRBF <- function(train, test, C = 0.01, Q = 2) {
re.list <- list()
model <- svm(x = train[ ,c("inten","sym")],
y = train[ ,"Y"],
type = "C-classification", scale = FALSE,
kernel = "radial", degree = Q, cost = C)
pred <- predict(model, newdata = train[ ,c("inten","sym")])
Ein <- sum(train$Y != pred)/nrow(train)
pred <- predict(model, newdata = test[ ,c("inten","sym")])
Eout <- sum(test$Y != pred)/nrow(test)
re.list <- cbind(re.list, c(C, Q, model$tot.nSV, Ein, Eout))
return(re.list)
}
fnSVMRBFDigit <- function(train, test, digit1, digit2 = NA, C = 0.01, Q = 2) {
d.tr <- fnDigitTestType(train, digit1, digit2)
d.te <- fnDigitTestType(test, digit1, digit2)
x <- as.data.frame.list(fnSVMRBF(d.tr, d.te, C, Q))
x$digit <- digit1
x <- x[, c(6,1:5)]
colnames(x)  <- c("digit", "C", "Q", "noSupportVec", "Ein", "Eout")
return(x)
}
ans6 <- list()
for (C in c(0.001, 0.01, 0.1, 1)) {
x <- fnSVMRBFDigit(d.train, d.test, 1, 5, C, 2)
ans6 <- rbind(ans6, x)
}
View(ans6)
fnSVMRBF <- function(train, test, C = 0.01, Q = 2) {
re.list <- list()
model <- svm(x = train[ ,c("inten","sym")],
y = train[ ,"Y"],
type = "C-classification", scale = FALSE,
kernel = "radial", degree = Q, cost = C)
pred <- predict(model, newdata = train[ ,c("inten","sym")])
Ein <- sum(train$Y != pred)/nrow(train)
pred <- predict(model, newdata = test[ ,c("inten","sym")])
Eout <- sum(test$Y != pred)/nrow(test)
re.list <- cbind(re.list, c(C, Q, model$tot.nSV, Ein, Eout))
return(re.list)
}
fnSVMRBFDigit <- function(train, test, digit1, digit2 = NA, C = 0.01, Q = 2) {
d.tr <- fnDigitTestType(train, digit1, digit2)
d.te <- fnDigitTestType(test, digit1, digit2)
x <- as.data.frame.list(fnSVMRBF(d.tr, d.te, C, Q))
x$digit <- digit1
x <- x[, c(6,1:5)]
colnames(x)  <- c("digit", "C", "Q", "noSupportVec", "Ein", "Eout")
return(x)
}
ans6 <- list()
for (C in c(0.001, 0.01, 0.1, 1)) {
x <- fnSVMRBFDigit(d.train, d.test, 1, 5, C, 2)
ans6 <- rbind(ans6, x)
}
1e6
fnSVMRBF <- function(train, test, C = 0.01, Q = 2) {
re.list <- list()
model <- svm(x = train[ ,c("inten","sym")],
y = train[ ,"Y"],
type = "C-classification", scale = FALSE,
kernel = "radial", degree = Q, cost = C)
pred <- predict(model, newdata = train[ ,c("inten","sym")])
Ein <- sum(train$Y != pred)/nrow(train)
pred <- predict(model, newdata = test[ ,c("inten","sym")])
Eout <- sum(test$Y != pred)/nrow(test)
re.list <- cbind(re.list, c(C, Q, model$tot.nSV, Ein, Eout))
return(re.list)
}
fnSVMRBFDigit <- function(train, test, digit1, digit2 = NA, C = 0.01, Q = 2) {
d.tr <- fnDigitTestType(train, digit1, digit2)
d.te <- fnDigitTestType(test, digit1, digit2)
x <- as.data.frame.list(fnSVMRBF(d.tr, d.te, C, Q))
x$digit <- digit1
x <- x[, c(6,1:5)]
colnames(x)  <- c("digit", "C", "Q", "noSupportVec", "Ein", "Eout")
return(x)
}
ans6 <- list()
for (C in c(0.01, 1, 100, 1e4, 1e6)) {
x <- fnSVMRBFDigit(d.train, d.test, 1, 5, C, 2)
ans6 <- rbind(ans6, x)
}
View(ans6)
fnSVMRBF <- function(train, test, C = 0.01, Q = 2) {
re.list <- list()
model <- svm(x = train[ ,c("inten","sym")],
y = train[ ,"Y"],
type = "C-classification", scale = FALSE,
kernel = "radial", degree = Q, cost = C)
pred <- predict(model, newdata = train[ ,c("inten","sym")])
Ein <- sum(train$Y != pred)/nrow(train)
pred <- predict(model, newdata = test[ ,c("inten","sym")])
Eout <- sum(test$Y != pred)/nrow(test)
re.list <- cbind(re.list, c(C, Q, model$tot.nSV, Ein, Eout))
return(re.list)
}
fnSVMRBFDigit <- function(train, test, digit1, digit2 = NA, C = 0.01, Q = 2) {
d.tr <- fnDigitTestType(train, digit1, digit2)
d.te <- fnDigitTestType(test, digit1, digit2)
x <- as.data.frame.list(fnSVMRBF(d.tr, d.te, C, Q))
x$digit <- digit1
x <- x[, c(6,1:5)]
colnames(x)  <- c("digit", "C", "Q", "noSupportVec", "Ein", "Eout")
return(x)
}
ans6 <- list()
for (C in c(0.01, 1, 100, 1e4, 1e6)) {
x <- fnSVMRBFDigit(d.train, d.test, 1, 5, C, 2)
ans6 <- rbind(ans6, x)
}
View(ans6)
