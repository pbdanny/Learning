"0","load(file = ""DataHW8.RData"")"
"0","library(""e1071"")"
"0","# Create target Y = {-1,1} by digit test type (one vs one) or (one vs all)"
"0","fnDigitTestType <- function(data, d1, d2 = NA) {"
"0","  data$Y <- as.factor(ifelse(data[,""digit""] == d1, 1, -1))"
"0","  if (is.na(d2)) {  # not specify 2nd compare digit, return other digit as -1"
"0","    return(data)"
"0","  } else {  # if specify d2 then one vs one , return only subset of d2"
"0","    return(data[data$digit == d1 | data$digit == d2, ])"
"0","  }"
"0","}"
"0","fnSVM <- function(train, test, C = 0.01, Q = 2) {"
"0","  re.list <- list()"
"0","  model <- svm(x = train[ ,c(""inten"",""sym"")],"
"0","               y = train[ ,""Y""],"
"0","               type = ""C-classification"", scale = FALSE, "
"0","               kernel = ""polynomial"", degree = Q, cost = C)"
"0","  pred <- predict(model, newdata = train[ ,c(""inten"",""sym"")])"
"0","  Ein <- sum(train$Y != pred)/nrow(train)"
"0","  pred <- predict(model, newdata = test[ ,c(""inten"",""sym"")])"
"0","  Eout <- sum(test$Y != pred)/nrow(test)"
"0","  re.list <- cbind(re.list, c(C, Q, model$tot.nSV, Ein, Eout))"
"0","  return(re.list)"
"0","}"
"0","fnSVMDigit <- function(train, test, digit1, digit2 = NA, C = 0.01, Q = 2) {"
"0","  d.tr <- fnDigitTestType(train, digit1, digit2)"
"0","  d.te <- fnDigitTestType(test, digit1, digit2)"
"0","  x <- as.data.frame.list(fnSVM(d.tr, d.te, C, Q))"
"0","  x$digit <- digit1"
"0","  x <- x[, c(6,1:5)]"
"0","  colnames(x)  <- c(""digit"", ""C"", ""Q"", ""noSupportVec"", ""Ein"", ""Eout"")"
"0","  return(x)"
"0","}"
