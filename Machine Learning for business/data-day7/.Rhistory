autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
autocorr <- (acf(arima.sim(n=1000, model=list(ma=c(0.5, 0.5)))))
autocorr$acf[3] # autocorr at lag (2)
autocorr$acf[2] # autocorr at lag (1)
getwd()
s <- read.csv(file = file.choose())
s <- load(file = file.choose())
str(s)
s
s <- readRDS(file = file.choose())
s <- readRDS(file = file.choose())
?readRDS
s <- load(file.choose())
s
View(sales)
load(file.choose())
rm(s)
sales[sales$agent_code == '3120244',]
rm(sales)
rm(list = ls())
## Simulate AR(p) process
X_ts <- arima.sim(model = list(c(0.4)), = 10000)
## Simulate AR(p) process
X_ts <- arima.sim(model = list(c(0.4)),n = 10000)
plot(X_tx)
plot(X_ts)
plot(acf(X_tx))
plot(acf(X_ts))
acf(X_ts)
acf(X_ts)
plot(X_ts)
## Simulate AR(p) process
set.seed(2016)
X_ts <- arima.sim(model = list(c(0.4)),n = 10000)
## Simulate AR(p) process
set.seed(2016)
X_ts <- arima.sim(model = list(c(0.4)),n = 10000)
par(mfrow = c(2,1))
plot(X_ts)
acf(X_ts)
## Simulate AR(p) process
set.seed(2016)
X_ts <- arima.sim(model = list(c(0.4)),n = 10000)
par(mfrow = c(2,1))
plot(X_ts, main = 'AR(1) Time Series on White Noise, phi = 0.4')
acf(X_ts, main = 'ACF')
## Simulate AR(p) process
set.seed(2016)
X_ts <- arima.sim(model = list(c(0.4)),n = 10000)
par(mfrow = c(2,1))
plot(X_ts, main = 'AR(1) Time Series on White Noise, phi = 0.4')
acf(X_ts, main = 'ACF')
## Simulate AR(p) process
set.seed(2016)
X_ts <- arima.sim(model = list(c(0.4)),n = 10000)
plot(X_ts, main = 'AR(1) Time Series on White Noise, phi = 0.4')
dev.off()
## Simulate AR(p) process
set.seed(2016)
X_ts <- arima.sim(model = list(c(0.4)),n = 10000)
plot(X_ts, main = 'AR(1) Time Series on White Noise, phi = 0.4')
acf(X_ts, main = 'ACF of AR(1), phi = 0.4')
## Simulate AR(p) process
set.seed(2016)
X_ts <- arima.sim(model = list(c(0.4)),n = 10000)
par(mfrow = c(2,1))
plot(X_ts, main = 'AR(1) Time Series on White Noise, phi = 0.4')
acf(X_ts, main = 'ACF of AR(1), phi = 0.4')
## Simulate AR(p) process
set.seed(2016)
X_ts <- arima.sim(model = list(ar = c(0.4)),n = 10000)
par(mfrow = c(2,1))
plot(X_ts, main = 'AR(1) Time Series on White Noise, phi = 0.4')
acf(X_ts, main = 'ACF of AR(1), phi = 0.4')
## Simulate AR(p) process
set.seed(2016)
X_ts <- arima.sim(model = list(ar = c(0.4)),n = 1000)
par(mfrow = c(2,1))
plot(X_ts, main = 'AR(1) Time Series on White Noise, phi = 0.4')
acf(X_ts, main = 'ACF of AR(1), phi = 0.4')
## Simulate AR(p) process
set.seed(2016)
X_ts <- arima.sim(model = list(ar = c(1)),n = 1000)
par(mfrow = c(2,1))
plot(X_ts, main = 'AR(1) Time Series on White Noise, phi = 0.4')
acf(X_ts, main = 'ACF of AR(1), phi = 0.4')
## Simulate AR(p) process
set.seed(2016)
X_ts <- arima.sim(model = list(ar = c(1)),n = 1000)
par(mfrow = c(2,1))
plot(X_ts, main = 'AR(1) Time Series on White Noise, phi = 0.4')
acf(X_ts, main = 'ACF of AR(1), phi = 0.4')
dev.off()
## Simulate AR(p) process
set.seed(2016)
X_ts <- arima.sim(model = list(ar = c(1)),n = 1000)
## Simulate AR(p) process
set.seed(2016)
X_ts <- arima.sim(list(ar = c(1)),n = 1000)
X_ts <- arima.sim(list(ar = 1,n = 1000)
## Simulate AR(p) process
set.seed(2016)
X_ts <- arima.sim(list(ar = 1,n = 1000))
## Simulate AR(p) process
set.seed(2016)
X_ts <- arima.sim(list(ar = 1),n = 1000)
?arima.sim
## Simulate AR(p) process
set.seed(2016)
X_ts <- arima.sim(model = list(ar = c(0.7, 0.2)), n = 1000)
par(mfrow = c(2,1))
plot(X_ts, main = 'AR(1) Time Series on White Noise, phi = 0.4')
acf(X_ts, main = 'ACF of AR(1), phi = 0.4')
## Simulate AR(p) process
set.seed(2016)
phi_1 <- 0.5
phi_2 <- 0.4
X_ts <- arima.sim(model = list(ar = c(phi_1, phi_2)), n = 1000)
par(mfrow = c(2,1))
plot(X_ts, main = 'AR(1) Time Series on White Noise, phi = 0.4')
acf(X_ts, main = 'ACF of AR(1), phi = 0.4')
dev.off()
plot(X_ts, main = paste0('AR(1) Time Series on White Noise, phi 1 : ', phi_1, ' phi 2 : ', phi_2))
par(mfrow = c(2,1))
dev.off()
par(mfrow = c(2,1))
plot(X_ts, main = paste0('AR(1) Time Series on White Noise, phi 1 : ', phi_1, ' phi 2 : ', phi_2))
acf(X_ts, main = 'ACF of AR(1), phi = 0.4')
dev.off()
par(mfrow = c(2,1))
plot(X_ts, main = paste0('AR Time Series , phi 1 : ', phi_1, ' phi 2 : ', phi_2))
acf(X_ts, main = 'ACF of AR(1), phi = 0.4')
acf(X_ts, main = 'ACF of AR')
dev.off()
par(mfrow = c(2,1))
plot(X_ts, main = paste0('AR Time Series , phi 1 : ', phi_1, ' phi 2 : ', phi_2))
acf(X_ts, main = 'ACF of AR')
## Simulate AR(p) process
set.seed(2016)
phi_1 <- 0.5
phi_2 <- -0.4
X_ts <- arima.sim(model = list(ar = c(phi_1, phi_2)), n = 1000)
par(mfrow = c(2,1))
plot(X_ts, main = paste0('AR Time Series , phi 1 : ', phi_1, ' phi 2 : ', phi_2))
acf(X_ts, main = 'ACF of AR')
par(mfrow = c(3 ,1))
phi_1 <- .6
phi_2 <- .2
## week 4 Partial ACF
# ACF of MA(q) coefficent will cease at time = q
set.seed(123)
par(mfrow = c(3 ,1))
phi_1 <- .6
phi_2 <- .2
data_ts <- arima.sim(n = 500, list(ar = c(phi_1, phi_2)))
plot(data_ts, main=
paste("Autoregressive Process with phi1=",phi_1," phi2=",phi_2) )
plot(data_ts, main=
paste("Autoregressive Process with phi1 =",phi_1," phi2 =",phi_2) )
par(mfrow = c(3 ,1))
dev.off()
## week 4 Partial ACF
# ACF of MA(q) coefficent will cease at time = q
set.seed(123)
par(mfrow = c(3 ,1))
phi_1 <- .6
phi_2 <- .2
data_ts <- arima.sim(n = 500, list(ar = c(phi_1, phi_2)))
plot(data_ts, main=
paste("Autoregressive Process with phi1 =",phi_1," phi2 =",phi_2) )
acf(data_ts, main="Autocorrelation Function")
acf(data_ts, type="partial", main="Partial Autocorrelation Function")
## week 4 Partial ACF
# ACF of MA(q) coefficent will cease at time = q
set.seed(123)
par(mfrow = c(3 ,1))
phi_1 <- .6
phi_2 <- .2
data_ts <- arima.sim(n = 500, list(ma = c(phi_1, phi_2)))
plot(data_ts, main=
paste("Autoregressive Process with phi1 =",phi_1," phi2 =",phi_2) )
acf(data_ts, main="Autocorrelation Function")
acf(data_ts, type="partial", main="Partial Autocorrelation Function")
## week 4 Partial ACF
# ACF of MA(q) coefficent will cease at time = q
set.seed(123)
par(mfrow = c(3 ,1))
phi_1 <- .6
phi_2 <- .2
data_ts <- arima.sim(n = 500, list(ar = c(phi_1, phi_2), ma = c(phi_1, phi_2)))
plot(data_ts, main=
paste("Autoregressive Process with phi1 =",phi_1," phi2 =",phi_2) )
acf(data_ts, main="Autocorrelation Function")
acf(data_ts, type="partial", main="Partial Autocorrelation Function")
set.seed(123)
par(mfrow = c(3 ,1))
phi_1 <- .6
phi_2 <- .2
data_ts <- arima.sim(n = 500, list(ar = c(phi_1, phi_2)))
plot(data_ts, main=
paste("Autoregressive Process with phi1 =",phi_1," phi2 =",phi_2) )
acf(data_ts, main="Autocorrelation Function")
acf(data_ts, type="partial", main="Partial Autocorrelation Function")
set.seed(123)
par(mfrow = c(3 ,1))
phi_1 <- .6
phi_2 <- .2
data_ts <- arima.sim(n = 500, list(ar = c(phi_1, phi_2)))
plot(data_ts, main=
paste("Autoregressive Process with phi1 =",phi_1," phi2 =",phi_2) )
acf(data_ts, main="Autocorrelation Function")
acf(data_ts, type="partial", main="Partial Autocorrelation Function")
set.seed(123)
par(mfrow = c(3 ,1))
phi_1 <- .6
phi_2 <- .2
data_ts <- arima.sim(n = 500, list(ar = c(phi_1, phi_2)))
plot(data_ts, main=
paste("Autoregressive Process with phi1 =",phi_1," phi2 =",phi_2) )
acf(data_ts, main="Autocorrelation Function")
acf(data_ts, type="partial", main="Partial Autocorrelation Function")
## week 4 Partial ACF
# ACF of MA(q) coefficent will cease at time = q
set.seed(123)
par(mfrow = c(3 ,1))
phi_1 <- 0.9
phi_2 <- 0.6
phi_3 <- 0.3
data_ts <- arima.sim(n = 500, list(ar = c(phi_1, phi_2, phi_3)))
## week 4 Partial ACF
# ACF of MA(q) coefficent will cease at time = q
set.seed(123)
par(mfrow = c(3 ,1))
phi_1 <- 0.9
phi_2 <- -0.6
phi_3 <- 0.3
data_ts <- arima.sim(n = 500, list(ar = c(phi_1, phi_2, phi_3)))
plot(data_ts, main=
paste("Autoregressive Process with phi1 =", phi_1, " phi2 =", phi_2, " phi3 = ", phi_3))
acf(data_ts, main="Autocorrelation Function")
acf(data_ts, type="partial", main="Partial Autocorrelation Function")
ratings <- read.csv("ratings.csv")
str(ratings)
setwd("/Users/Danny/Documents/Learning/Machine Learning for business/data-day7")
# 1.2 Import movies rating data (users, movies, rating)
ratings <- read.csv("ratings.csv")
str(ratings)
## Slide: 47 Create rating matrix Rows = userId, Columns = movieId
library(reshape2)
rating_matrix <- dcast(ratings, userId~movieId, value.var = "rating", na.rm=FALSE)
rating_matrix <- as.matrix(rating_matrix[,-1]) #remove userIds
ls()
head(rating)
head(raging)
head(ratings
)
head(rating_matrix)
rating_matrix[1,]
View(rating_matrix[1,])
View(rating_matrix[1:3,])
dim(rating_matrix)
## Slide 49: Use recommenderlab to create user-based recommender engine
library(recommenderlab)
install.packages("recommenderlab")
install.packages("recommenderlab")
# 3.1 Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(rating_matrix, "realRatingMatrix")
## Slide 49: Use recommenderlab to create user-based recommender engine
library(recommenderlab)
# 3.1 Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(rating_matrix, "realRatingMatrix")
## Slide 50: Create recommender
e <- evaluationScheme(ratingmat, method = "split", train = 0.9, k = 1, given = 15)
r <- Recommender(getData(e, "train"), "UBCF")
## Slide 51: Make recommendation
p <- predict(r, getData(e, "known"), type="topNList")
p.list <- getList(p)
movies[as.integer(p.list[[1]]),]
## Slide 51: Make recommendation
p <- predict(r, getData(e, "known"), type="topNList")
p.list <- getList(p)
movies[as.integer(p.list[[1]]),]
object.size(e)
object.size(r)
# 3.1 Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(rating_matrix, "realRatingMatrix")
## Slide 50: Create recommender
e <- evaluationScheme(ratingmat, method = "split", train = 0.9, k = 1, given = 15)
r <- Recommender(getData(e, "train"), "UBCF")
movies[as.integer(p.list[[2]]),]
## Slide 51: Make recommendation
p <- predict(r, getData(e, "known"), type="topNList")
p.list <- getList(p)
movies[as.integer(p.list[[2]]),]
rm(list = ls())
## Beveridge
b <- read.csv(file = "/Users/Danny/Documents/Learning/Coursera/R Practical Time Series Analysis-SUNY/beveridge-wheat-price-index-1500.csv",
header = T, stringsAsFactors = F)
b <- b[1:370, ]
b_ts <- ts(as.numeric(b[,2]), start = 1500)
plot(b_ts, ylab = 'price', main = "Beveridge Wheat Price Data")
# smooth with MA30
b_ma <- filter(b_ts, rep(1/31, 31), sides = 2)
# plot MA30
lines(b_ma, col = "red")
# smooth data with MA30
Y <- b_ts/b_ma
plot(Y, ylab = "scaled price", main = "Detrend data")
par(mfrow = c(3,1))
# smooth data with MA30
Y <- b_ts/b_ma
plot(Y, ylab = "scaled price", main = "Detrend data")
par(mfrow = c(3,1))
# smooth data with MA30
Y <- b_ts/b_ma
plot(Y, ylab = "scaled price", main = "Detrended data")
View(Y)
View(b_ts)
View(b_ma)
length(b_ma)
length(b_ts)
length(Y)
View(b_ma)
# remove cannot smooth data, head & tails of data that could not find MA
acf(na.omit(Y), main = "Autocorrelation of detrend data")
acf(na.omit(Y), type = 'partial', main = "Partial Autocorrelation od detrend data")
## use ar analysis AR process
ar(na.omit(Y), order.max = 5)
library("isdals")
install.packages("isdals")
library(isdals)
?isdals
data("bodyfat")
?bodyfat
install.packages(c("DBI", "devtools", "forcats", "gdtools", "httpuv", "knitr", "lubridate", "MASS", "openssl", "pillar", "rlang", "rmarkdown", "rpart", "selectr", "sfsmisc", "stringr", "tidyselect", "timeDate", "XML", "yaml"))
## Theory of Partial Auto Correlation
library(isdals)
data("bodyfat")
str(bodyfat)
cor(bodyfat)
pairs(bodyfat)
fit <- lm(data = bodyfat, Fat ~ .)
summary(fit)
step(fit)
plot(step(fit))
fit_min <- lm(Fat ~ 1, data = bodyfat)
fit_max <- formula(fit(Fat ~ ., data = bodyfat))
fit_max <- formula(lm(Fat ~ ., data = bodyfat))
step(fit_min, direction = "forward", scope = fit_max)
cor(bodyfat)
