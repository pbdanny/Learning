"0","# fn run SVM with CV"
"0","fnSVMCV <- function(train, test, digit1, digit2 = NA, C = 0.01, Q = 2, f = 10) {"
"0","  "
"0","  d.tr <- fnDigitTestType(train, digit1, digit2)"
"0","  rownames(d.tr) <- NULL  # Reset rownums of data"
"0","  cv.idx <- sample(rep(1:f, nrow(d.tr)/f))  # create cv.idx for cv test"
"0","  "
"0","  out <- list()"
"0","  for (i in 1:f) {  # Looping each fold"
"0","    for (c in c(0.0001, 0.001, 0.01, 0.1, 1)) {  # Looping each C"
"0","      x <- as.data.frame.list(fnSVM(d.tr[cv.idx != i,], d.tr[cv.idx == i,], c, 2))"
"0","      x$fold <- i"
"0","      x <- x[, c(6,1:5)]"
"0","      colnames(x)  <- c(""fold"", ""C"", ""Q"", ""noSupportVec"", ""Ein"", ""Ecv"")"
"0","      out <- rbind(out, x)"
"0","    }  # End loop C"
"0","  } # End loop fold"
"0","  agg <- aggregate(out[""Ecv""], by = out[""C""], FUN = mean)   # Average Ecv by C"
"0","  agg <- agg[order(agg$Ecv, agg$C), ]  # order by least Ecv and least C"
"0","  return(agg[1, ])"
"0","}"
